# Boolean-returning expressions
false: a -> { 1 0 = () }
true: a -> { 1 1 = () }

# List definition
empty: visitor -> {}

cons: list -> value -> {
    visitor -> {
        value visitor ()
        visitor list ()
    }
}

# List helpers
reverse_list: list -> {
    empty

    value -> {
        list -> { list value cons () }
        ()
    }

    list ()
}

# Parse helpers
is_digit: c -> {
    c
    
    false
    
    c -> {
        c
        
        false
        
        true
        
        47 c > ()
        
        ? () ()
    }
    
    58 c < ()
    
    ? () ()
}

# Token constructors
number_token: number -> {
    visit_number -> visit_operator -> {
        number visit_number ()
    }
}

operator_token: operator -> {
    visit_number -> visit_operator -> {
        operator visit_operator ()
    }
}

token_plus: 0
token_minus: 1

# Main parsing method
parse_input: {
    finish: 0
    peek: 1
    consume: 2

    # Number parsing mode:
    # Consumes characters until "not a digit" is received
    parse_number: tokens -> char -> number -> {
        check_digit: char -> {
            {
                tokens 
                number number_token ()
                cons ()

                peek
                process_char
            }

            {
                tokens
                consume

                "0" char - ()
                number 10 * ()
                + ()

                number -> {
                    tokens -> char -> {
                        tokens char number parse_number ()
                    }
                }

                ()
            }

            char is_digit ()
            
            ? () ()
        }

        char check_digit ()
    }

    # Top-level parsing mode
    process_char: tokens -> char -> {
        # Final case, check if the parsing is done
        check_eof: char -> {
            {
                "Error: Unexpected '" ,,,,,,,,,,,,,,,,,,,
                char ,
                10 "'" ,,

                empty
                finish
                {}
            }

            {
                tokens
                finish
                {}
            }

            char 10 = ()

            ? () ()
        }

        # Check for the "-" operator
        check_minus: char -> {
            {
                # TODO: Additional operators and parenthesis
                char check_eof ()
            }

            {
                tokens 
                token_minus operator_token ()
                cons ()

                consume
                process_char
            }

            char "-" = ()
            
            ? () ()
        }

        # Check for the "+" operator
        check_plus: char -> {
            {
                char check_minus ()
            }

            {
                tokens 
                token_plus operator_token ()
                cons ()

                consume
                process_char
            }

            char "+" = ()
            
            ? () ()
        }

        # Check if we are about to parse a number
        check_digit: char -> {
            {
                char check_plus ()
            }

            {
                tokens
                consume

                "0" char - ()

                number -> {
                    tokens -> char -> {
                        tokens char number parse_number ()
                    }
                }

                ()
            }

            char is_digit ()
            
            ? () ()
        }

        # Skip any whitespace
        check_whitespace: char -> {
            {
                char check_digit ()
            }

            {
                tokens
                consume
                process_char
            }

            char " " = ()
            
            ? () ()
        }

        char check_whitespace ()
    }

    # Main input loop
    main_loop: tokens -> process -> {
        handle: tokens -> char -> process -> {
            tokens char process ()

            tokens -> result -> process -> {
                { 
                    { tokens process main_loop () }
                    { tokens char process handle () }
                    peek result = ()
                    ? () ()
                }

                { 
                    tokens 
                }

                finish result = ()
                ? () ()
            }

            ()
        }

        tokens ~ process handle ()
    }

    empty process_char main_loop ()
}

# Parsed input execution method
execute_input: tokens -> {
    operator_builtin: operator -> {
        {
            { 0 }
            { x -> y -> { y x - () } }
            operator token_minus = ()

            ? () ()
        }

        { + }
        operator token_plus = ()

        ? () ()
    }

    number_visitor: number -> {
        operator_stack -> { number operator_stack }
        ()
    }

    operator_visitor: operator -> {
        operator operator_builtin ()

        operator_stack -> operator -> {
            # TODO: peek and check precedence
            operator_stack operator cons ()
        }

        ()
    }

    list_visitor: token -> {
        number_visitor operator_visitor token ()
    }

    fold_operators: operators -> {
        operator -> {
            operator ()
        }

        operators ()
    }

    empty 
    list_visitor tokens ()
    fold_operators ()
}

parse_input ()
reverse_list ()
execute_input ()

.